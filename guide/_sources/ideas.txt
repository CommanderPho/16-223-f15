.. include:: links.rst

.. _ideation:

Ideation and Brainstorming
==========================

We all occasionally become stuck while trying to choose an idea.  Following are
a few general strategies to overcome your blocks.  If ever you feel stuck
generating ideas, try some of these steps.  Use what works, ignore the rest.

You also find inspiration from the :ref:`related-work` page.


General Brainstorming Heuristics
--------------------------------

#. Let go of your fear, let go of any preconceptions of brilliance.  Ideas are
   cheap.  Dirt cheap.  The work and interest comes from thinking it through,
   identifying the questions, fitting into constraints, solving the underlying
   problems, identifying the difficult parts, finding the novel bits, framing
   the story.  Ideas mostly arise from other ideas. Don't wait for inspiration,
   apply some systematic generation and better ideas will almost always evolve.
   If you're stuck for one idea, generate ten.

#. *All ideas can be rendered at all scales.* The essence of a big idea can be
   isolated down to an elegant small example.  If an appealing idea seems
   intimidating or unmanageable, what is the essential bit which could tested
   first as a proof of concept?  This is a good use for
   :ref:`regressing-the-question`.
   
#. Look around the room, choose two things, jam them together.  E.g., "door,
   concrete blocks, what about doors made of concrete?  What about a design
   system for hinged concrete structures?"  I'm sure you can do better.  Or pick
   two systems and try to apply arbitrary elements of one to another.  These
   ideas are rarely useful but will open the doors to others.

#. Look for the hard parts: these might be opportunities, or maybe just hints to
   simplify.  Follow the path of least resistance: choose your battles carefully
   and make sure anything hard is actually essential and not a distraction.

#. Look for the rules and metrics: how are you going to evaluate whether the
   idea fits the need?  Often defining the rubric is harder than generating the
   idea itself.

#. How would you explain your idea to an alien?  How would your explain your
   idea to Spock (RIP) or a perfectly rational being?  The point is to tease out
   your unspoken assumptions and see if they can be adjusted.

#. For the designers lost in the absence of a client: assume *you* are the
   client.  What needs do you have?  What would you like to see existing in the
   world?  Or choose your ideal fantasy client: what need would they have?  If
   you need a dirty canvas, look around you and pick any starting point: design
   for wherever you are.

#. It may help to think of a project as the first step in a larger project; for
   more ambitious ideas try to think of the smallest first step which can be
   tested with some basic circuitry and mechanism.

#. The primary difference between undergraduates and graduate students is that
   undergraduates have not yet learned how to follow through on an idea.  Never
   rest, always relentlessly ask yourself the followup questions.

   
.. _regressing-the-question:

Regressing the Question
-----------------------

I first heard this articulated by `Bernie Roth`_ in 1996 in the early days of
the `Stanford d.school`_, although the closest technique in their current
vocabulary of methods is `Why-How Laddering`_.

In the original form, the process works as follows.  Given an idea, ask the
question: "If I actually had that solution, what would it really provide?"  This
*regression* is a means of discovering what underlying abstract needs the idea
might fulfill.  Carried out iteratively, it frequently ends up following a chain
of abstract needs to something quite fundamental (e.g. the elements of `Maslow's
Hierarchy`_).  This process almost always identifies elements of your idea which
can be dropped as inessential or distracting.  From there it is possible to
follow a similar chain in reverse and find other ideas related to the first, but
frequently better and more focused.

The "why-how ladder" is a more concrete articulation of the process.  Given a
user need, asking "why?" questions will develop more abstract needs, possibly
iteratively.  Then asking "how?" questions will uncover more concrete
realizations parallel to the first need.

If you like this approach, the `Stanford d.school methods`_ page has many more
resources related to design thinking.

