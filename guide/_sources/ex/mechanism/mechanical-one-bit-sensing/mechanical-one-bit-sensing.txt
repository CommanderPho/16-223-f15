.. _exercise-mechanical-one-bit-sensing:

Exercise: Mechanisms for One-Bit Sensing
----------------------------------------

**Note: this is a new exercise, please provide feedback on errors and
clarity.**

Objective
^^^^^^^^^

Design and test a simple mechanical transmission which couples a
mechanical state of interest to a one-bit sensor such as a microswitch.

Overview
^^^^^^^^

Simple two-state sensors are found throughout many machine designs. They
are often the most efficient feedback solution in terms of cost,
complexity and robustness. Essentially, they reduce the state of the
world down to one bit with carefully chosen semantics, the most
reductionist state model possible. This was phrased elegantly in `a 1983
essay <http://www-formal.stanford.edu/jmc/little/little.html>`__ by the
late `Professor John
McCarthy <https://en.wikipedia.org/wiki/John_McCarthy_%28computer_scientist%29>`__:

    Keep in mind that the thermostat can only be properly considered to
    have just three possible thoughts or beliefs. It may believe that
    the room is too hot, or that it is too cold, or that it is ok. It
    has no other beliefs; for example, it does not believe that it is a
    thermostat.

In actual practice, many furnace-only thermostats have only *two*
beliefs: it is too cold, or it is fine.

The key is arranging the physical design of the system to respond to the
world state in a bimodal way. This exercise explores this idea in
practice through a simple limit switch arrangement.

Exercise Details
^^^^^^^^^^^^^^^^

For this exercise, we are providing a sample design to explain the idea,
but we would like you to draw your own design from scratch. However, the
sources for the design can be found in the
`physcomp-solidworks <https://github.com/cmuphyscomp/physcomp-solidworks>`__
git repository on github.

A common use of switches in machine design is as a *limit switch* which
detects when a movement has reached one end of the acceptable limit of
travel. This is a type of one-bit touch sensor which uses the fact that
the presence of an object pressing on the switch can have only one
meaning, namely, that the axis has traveled too far. The same approach
applies to door switches, drawer switches, and through-beam limits: the
activation of the switch can have only one semantic meaning in the
context of the process, so it is useful as a one-bit sensor.

The example below is a simple lever extension of a microswitch with the
following features: the pivoting lever responds to an object brushing
past the curved end, the two limit-stop screws prevent the lever from
either damaging the switch or leaving the sensed region, and the switch
flag can be bent for fine-tuning the exact threshold.

Steps and observations
^^^^^^^^^^^^^^^^^^^^^^

#. Choose a simple mechanical process from which to sense a one-bit
   state. Some ideas: motor reaching a limit, door opening, person
   bumping a table, hook catching a ring, weight exceeding a limit, etc.
#. Analyze the movement to determine what mechanical position could
   serve as a threshold for the state of interest.
#. Design a simple mechanism to couple the movement to a binary sensor.
   The example below can serve as a starting point. A microswitch is a
   good sensor for this test as it is cost-effective and
   power-efficient. You may also use a magnet and Hall effect sensor or
   a photointerrupter and flag if either are more suitable.
#. Be sure to include travel limits as necessary to keep the sensor
   itself in a safe condition.
#. Test your mechanism. Does it reliably trigger on the condition of
   interest? Can you find conditions which induce false positives or
   false negatives? How much did you expand the range of motion of the
   sensor?

Comments
^^^^^^^^

This exercise actually understates the potential of one-bit sensors,
because the other available axis is *time*. A one-bit sensor activating
over time can be viewed as a binary trajectory which can reveal much
about the underlying process via statistical analysis or machine
learning.

Other Files
^^^^^^^^^^^

#. DXF with sample cutting plan: :download:`switch_trigger_cutting_plan.dxf`

|image0| |image1|

.. |image0| image:: switch_trigger.png
.. |image1| image:: switch_trigger_cutting_plan.png
